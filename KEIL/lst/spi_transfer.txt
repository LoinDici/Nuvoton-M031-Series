; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spi_transfer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi_transfer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\rk3399_i2c_SPI_Flash -I.\RTE\_rk3399_i2c_SPI_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.3.10\Device\M031\Include -D__MICROLIB -D__UVISION_VERSION=532 -D_RTE_ -D_RTE_ -DxxDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\spi_transfer.crf ..\spi_transfer.c]
                          THUMB

                          AREA ||i.Compare||, CODE, READONLY, ALIGN=2

                  Compare PROC
;;;349    
;;;350    void Compare(uint32_t u32DataSize)
000000  b570              PUSH     {r4-r6,lr}
;;;351    {
000002  4605              MOV      r5,r0
;;;352    	uint32_t u32ByteCount;
;;;353    	uint32_t nError = 0;
000004  2400              MOVS     r4,#0
;;;354    	
;;;355    	printf("Compare...");
000006  a00b              ADR      r0,|L1.52|
000008  f7fffffe          BL       __2printf
;;;356    	for(u32ByteCount = 0; u32ByteCount < u32DataSize; u32ByteCount++) {
00000c  2100              MOVS     r1,#0
;;;357    		if(g_u8CompareData[u32ByteCount] != g_au8SlvData[u32ByteCount])
00000e  480c              LDR      r0,|L1.64|
000010  4a0c              LDR      r2,|L1.68|
000012  e005              B        |L1.32|
                  |L1.20|
000014  5c43              LDRB     r3,[r0,r1]
000016  5c56              LDRB     r6,[r2,r1]
000018  42b3              CMP      r3,r6
00001a  d000              BEQ      |L1.30|
00001c  1c64              ADDS     r4,r4,#1
                  |L1.30|
00001e  1c49              ADDS     r1,r1,#1
                  |L1.32|
000020  42a9              CMP      r1,r5                 ;356
000022  d3f7              BCC      |L1.20|
;;;358    			nError ++;
;;;359    	}
;;;360    	if(nError == 0)
000024  2c00              CMP      r4,#0
000026  d003              BEQ      |L1.48|
;;;361    		printf("[OK]\n");
;;;362    	else
;;;363    		printf("[FAIL]\n");
000028  a007              ADR      r0,|L1.72|
                  |L1.42|
00002a  f7fffffe          BL       __2printf
;;;364    }
00002e  bd70              POP      {r4-r6,pc}
                  |L1.48|
000030  a007              ADR      r0,|L1.80|
000032  e7fa              B        |L1.42|
                          ENDP

                  |L1.52|
000034  436f6d70          DCB      "Compare...",0
000038  6172652e
00003c  2e2e00  
00003f  00                DCB      0
                  |L1.64|
                          DCD      g_u8CompareData
                  |L1.68|
                          DCD      g_au8SlvData
                  |L1.72|
000048  5b464149          DCB      "[FAIL]\n",0
00004c  4c5d0a00
                  |L1.80|
000050  5b4f4b5d          DCB      "[OK]\n",0
000054  0a00    
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.SPI0_Init||, CODE, READONLY, ALIGN=2

                  SPI0_Init PROC
;;;10     
;;;11     void SPI0_Init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;12     {
;;;13         /* Set PA.0 for SPI0_MOSI, PA.1 for SPI0_MISO, PA.2 for SPI0_CLK, PA.3 for SPI0_SS */
;;;14         SYS->GPA_MFPL &= ~(SYS_GPA_MFPL_PA0MFP_Msk | SYS_GPA_MFPL_PA1MFP_Msk | \
000002  2001              MOVS     r0,#1
000004  0780              LSLS     r0,r0,#30
000006  6b01              LDR      r1,[r0,#0x30]
000008  0c09              LSRS     r1,r1,#16
00000a  0409              LSLS     r1,r1,#16
00000c  6301              STR      r1,[r0,#0x30]
;;;15     		SYS_GPA_MFPL_PA2MFP_Msk | SYS_GPA_MFPL_PA3MFP_Msk);
;;;16         SYS->GPA_MFPL |= (SYS_GPA_MFPL_PA0MFP_SPI0_MOSI | SYS_GPA_MFPL_PA1MFP_SPI0_MISO | \
00000e  6b01              LDR      r1,[r0,#0x30]
000010  4a07              LDR      r2,|L2.48|
000012  4311              ORRS     r1,r1,r2
000014  6301              STR      r1,[r0,#0x30]
;;;17     		SYS_GPA_MFPL_PA2MFP_SPI0_CLK | SYS_GPA_MFPL_PA3MFP_SPI0_SS);
;;;18     
;;;19         /* Configure SPI_FLASH_PORT as a master, MSB first, 8-bit transaction, SPI Mode-0 timing, clock is 24MHz */
;;;20         SPI_Open(SPI_FLASH_PORT, SPI_MASTER, SPI_MODE_0, 8, SPI_FLASH_FREQ);
000016  4807              LDR      r0,|L2.52|
000018  4c07              LDR      r4,|L2.56|
00001a  9000              STR      r0,[sp,#0]
00001c  2308              MOVS     r3,#8
00001e  2204              MOVS     r2,#4
000020  2100              MOVS     r1,#0
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       SPI_Open
;;;21     
;;;22         /* Disable auto SS function, control SS signal manually */
;;;23         SPI_DisableAutoSS(SPI_FLASH_PORT);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SPI_DisableAutoSS
;;;24     }
00002e  bd38              POP      {r3-r5,pc}
;;;25     
                          ENDP

                  |L2.48|
                          DCD      0x00004444
                  |L2.52|
                          DCD      0x00989680
                  |L2.56|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_BlockErase32KB||, CODE, READONLY, ALIGN=2

                  SpiFlash_BlockErase32KB PROC
;;;92     
;;;93     void SpiFlash_BlockErase32KB(uint32_t StartAddress)
000000  b570              PUSH     {r4-r6,lr}
;;;94     {
000002  4601              MOV      r1,r0
;;;95         // /CS: active
;;;96         SPI_SET_SS_LOW(SPI_FLASH_PORT);
000004  4814              LDR      r0,|L3.88|
000006  6882              LDR      r2,[r0,#8]
000008  250c              MOVS     r5,#0xc
00000a  43aa              BICS     r2,r2,r5
00000c  2601              MOVS     r6,#1
00000e  4332              ORRS     r2,r2,r6
000010  6082              STR      r2,[r0,#8]
;;;97     
;;;98         // send Command: 0x06, Write enable
;;;99         SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000012  2206              MOVS     r2,#6
000014  6202              STR      r2,[r0,#0x20]
                  |L3.22|
;;;100    
;;;101        // wait tx finish
;;;102        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000016  6942              LDR      r2,[r0,#0x14]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L3.22|
;;;103    
;;;104        // /CS: de-active
;;;105        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001c  6882              LDR      r2,[r0,#8]
00001e  2308              MOVS     r3,#8
000020  439a              BICS     r2,r2,r3
000022  2405              MOVS     r4,#5
000024  4322              ORRS     r2,r2,r4
000026  6082              STR      r2,[r0,#8]
;;;106    
;;;107        //////////////////////////////////////////
;;;108    
;;;109        // /CS: active
;;;110        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000028  6882              LDR      r2,[r0,#8]
00002a  43aa              BICS     r2,r2,r5
00002c  4332              ORRS     r2,r2,r6
00002e  6082              STR      r2,[r0,#8]
;;;111    
;;;112        // send Command: 0x52, 32KB Block Erase
;;;113        SPI_WRITE_TX(SPI_FLASH_PORT, 0x52);
000030  2252              MOVS     r2,#0x52
000032  6202              STR      r2,[r0,#0x20]
;;;114    
;;;115        // send 24-bit start address
;;;116        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000034  020a              LSLS     r2,r1,#8
000036  0e12              LSRS     r2,r2,#24
000038  6202              STR      r2,[r0,#0x20]
;;;117        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
00003a  040a              LSLS     r2,r1,#16
00003c  0e12              LSRS     r2,r2,#24
00003e  6202              STR      r2,[r0,#0x20]
;;;118        SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
000040  b2c9              UXTB     r1,r1
000042  6201              STR      r1,[r0,#0x20]
                  |L3.68|
;;;119    
;;;120        // wait tx finish
;;;121        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000044  6941              LDR      r1,[r0,#0x14]
000046  07c9              LSLS     r1,r1,#31
000048  d1fc              BNE      |L3.68|
;;;122    
;;;123        // /CS: de-active
;;;124        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00004a  6881              LDR      r1,[r0,#8]
00004c  4399              BICS     r1,r1,r3
00004e  4321              ORRS     r1,r1,r4
000050  6081              STR      r1,[r0,#8]
;;;125    
;;;126        SPI_ClearRxFIFO(SPI_FLASH_PORT);
000052  f7fffffe          BL       SPI_ClearRxFIFO
;;;127    }
000056  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP

                  |L3.88|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_BlockErase64KB||, CODE, READONLY, ALIGN=2

                  SpiFlash_BlockErase64KB PROC
;;;56     
;;;57     void SpiFlash_BlockErase64KB(uint32_t StartAddress)
000000  b570              PUSH     {r4-r6,lr}
;;;58     {
000002  4601              MOV      r1,r0
;;;59         // /CS: active
;;;60         SPI_SET_SS_LOW(SPI_FLASH_PORT);
000004  4814              LDR      r0,|L4.88|
000006  6882              LDR      r2,[r0,#8]
000008  250c              MOVS     r5,#0xc
00000a  43aa              BICS     r2,r2,r5
00000c  2601              MOVS     r6,#1
00000e  4332              ORRS     r2,r2,r6
000010  6082              STR      r2,[r0,#8]
;;;61     
;;;62         // send Command: 0x06, Write enable
;;;63         SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000012  2206              MOVS     r2,#6
000014  6202              STR      r2,[r0,#0x20]
                  |L4.22|
;;;64     
;;;65         // wait tx finish
;;;66         while(SPI_IS_BUSY(SPI_FLASH_PORT));
000016  6942              LDR      r2,[r0,#0x14]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L4.22|
;;;67     
;;;68         // /CS: de-active
;;;69         SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001c  6882              LDR      r2,[r0,#8]
00001e  2308              MOVS     r3,#8
000020  439a              BICS     r2,r2,r3
000022  2405              MOVS     r4,#5
000024  4322              ORRS     r2,r2,r4
000026  6082              STR      r2,[r0,#8]
;;;70     
;;;71         //////////////////////////////////////////
;;;72     
;;;73         // /CS: active
;;;74         SPI_SET_SS_LOW(SPI_FLASH_PORT);
000028  6882              LDR      r2,[r0,#8]
00002a  43aa              BICS     r2,r2,r5
00002c  4332              ORRS     r2,r2,r6
00002e  6082              STR      r2,[r0,#8]
;;;75     
;;;76         // send Command: 0xD8, 64KB Block Erase
;;;77         SPI_WRITE_TX(SPI_FLASH_PORT, 0xD8);
000030  22d8              MOVS     r2,#0xd8
000032  6202              STR      r2,[r0,#0x20]
;;;78     
;;;79         // send 24-bit start address
;;;80         SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000034  020a              LSLS     r2,r1,#8
000036  0e12              LSRS     r2,r2,#24
000038  6202              STR      r2,[r0,#0x20]
;;;81         SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
00003a  040a              LSLS     r2,r1,#16
00003c  0e12              LSRS     r2,r2,#24
00003e  6202              STR      r2,[r0,#0x20]
;;;82         SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
000040  b2c9              UXTB     r1,r1
000042  6201              STR      r1,[r0,#0x20]
                  |L4.68|
;;;83     
;;;84         // wait tx finish
;;;85         while(SPI_IS_BUSY(SPI_FLASH_PORT));
000044  6941              LDR      r1,[r0,#0x14]
000046  07c9              LSLS     r1,r1,#31
000048  d1fc              BNE      |L4.68|
;;;86     
;;;87         // /CS: de-active
;;;88         SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00004a  6881              LDR      r1,[r0,#8]
00004c  4399              BICS     r1,r1,r3
00004e  4321              ORRS     r1,r1,r4
000050  6081              STR      r1,[r0,#8]
;;;89     
;;;90         SPI_ClearRxFIFO(SPI_FLASH_PORT);
000052  f7fffffe          BL       SPI_ClearRxFIFO
;;;91     }
000056  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

                  |L4.88|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_ChipErase||, CODE, READONLY, ALIGN=2

                  SpiFlash_ChipErase PROC
;;;164    
;;;165    void SpiFlash_ChipErase(void)
000000  b570              PUSH     {r4-r6,lr}
;;;166    {
;;;167        // /CS: active
;;;168        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000002  4811              LDR      r0,|L5.72|
000004  6881              LDR      r1,[r0,#8]
000006  240c              MOVS     r4,#0xc
000008  43a1              BICS     r1,r1,r4
00000a  2501              MOVS     r5,#1
00000c  4329              ORRS     r1,r1,r5
00000e  6081              STR      r1,[r0,#8]
;;;169    
;;;170        // send Command: 0x06, Write enable
;;;171        SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000010  2106              MOVS     r1,#6
000012  6201              STR      r1,[r0,#0x20]
                  |L5.20|
;;;172    
;;;173        // wait tx finish
;;;174        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000014  6941              LDR      r1,[r0,#0x14]
000016  07c9              LSLS     r1,r1,#31
000018  d1fc              BNE      |L5.20|
;;;175    
;;;176        // /CS: de-active
;;;177        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001a  6881              LDR      r1,[r0,#8]
00001c  2208              MOVS     r2,#8
00001e  4391              BICS     r1,r1,r2
000020  2305              MOVS     r3,#5
000022  4319              ORRS     r1,r1,r3
000024  6081              STR      r1,[r0,#8]
;;;178    
;;;179        //////////////////////////////////////////
;;;180    
;;;181        // /CS: active
;;;182        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000026  6881              LDR      r1,[r0,#8]
000028  43a1              BICS     r1,r1,r4
00002a  4329              ORRS     r1,r1,r5
00002c  6081              STR      r1,[r0,#8]
;;;183    
;;;184        // send Command: 0xC7, Chip Erase
;;;185        SPI_WRITE_TX(SPI_FLASH_PORT, 0xC7);
00002e  21c7              MOVS     r1,#0xc7
000030  6201              STR      r1,[r0,#0x20]
                  |L5.50|
;;;186    
;;;187        // wait tx finish
;;;188        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000032  6941              LDR      r1,[r0,#0x14]
000034  07c9              LSLS     r1,r1,#31
000036  d1fc              BNE      |L5.50|
;;;189    
;;;190        // /CS: de-active
;;;191        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
000038  6881              LDR      r1,[r0,#8]
00003a  4391              BICS     r1,r1,r2
00003c  4319              ORRS     r1,r1,r3
00003e  6081              STR      r1,[r0,#8]
;;;192    
;;;193        SPI_ClearRxFIFO(SPI_FLASH_PORT);
000040  f7fffffe          BL       SPI_ClearRxFIFO
;;;194    }
000044  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_NormalPageProgram||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalPageProgram PROC
;;;262    
;;;263    void SpiFlash_NormalPageProgram(uint32_t StartAddress, uint32_t u32DataSize)
000000  b5f8              PUSH     {r3-r7,lr}
;;;264    {
000002  4603              MOV      r3,r0
;;;265        uint32_t i = 0;
;;;266    
;;;267        // /CS: active
;;;268        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000004  481a              LDR      r0,|L6.112|
000006  2200              MOVS     r2,#0                 ;265
000008  6884              LDR      r4,[r0,#8]
00000a  270c              MOVS     r7,#0xc
00000c  43bc              BICS     r4,r4,r7
00000e  2501              MOVS     r5,#1
000010  432c              ORRS     r4,r4,r5
000012  6084              STR      r4,[r0,#8]
;;;269    
;;;270        // send Command: 0x06, Write enable
;;;271        SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000014  2406              MOVS     r4,#6
000016  6204              STR      r4,[r0,#0x20]
                  |L6.24|
;;;272    
;;;273        // wait tx finish
;;;274        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000018  6944              LDR      r4,[r0,#0x14]
00001a  07e4              LSLS     r4,r4,#31
00001c  d1fc              BNE      |L6.24|
;;;275    
;;;276        // /CS: de-active
;;;277        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001e  6886              LDR      r6,[r0,#8]
000020  2408              MOVS     r4,#8
000022  43a6              BICS     r6,r6,r4
000024  2505              MOVS     r5,#5
000026  432e              ORRS     r6,r6,r5
000028  6086              STR      r6,[r0,#8]
;;;278    
;;;279    
;;;280        // /CS: active
;;;281        SPI_SET_SS_LOW(SPI_FLASH_PORT);
00002a  6886              LDR      r6,[r0,#8]
00002c  43be              BICS     r6,r6,r7
00002e  2701              MOVS     r7,#1
000030  433e              ORRS     r6,r6,r7
000032  6086              STR      r6,[r0,#8]
;;;282    
;;;283        // send Command: 0x02, Page program
;;;284        SPI_WRITE_TX(SPI_FLASH_PORT, 0x02);
000034  2602              MOVS     r6,#2
000036  6206              STR      r6,[r0,#0x20]
;;;285    
;;;286        // send 24-bit start address
;;;287        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000038  021e              LSLS     r6,r3,#8
00003a  0e36              LSRS     r6,r6,#24
00003c  6206              STR      r6,[r0,#0x20]
;;;288        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
00003e  041e              LSLS     r6,r3,#16
000040  0e36              LSRS     r6,r6,#24
000042  6206              STR      r6,[r0,#0x20]
;;;289        SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
000044  b2db              UXTB     r3,r3
000046  6203              STR      r3,[r0,#0x20]
;;;290    
;;;291        // write data
;;;292        while(1)
;;;293        {
;;;294            if(!SPI_GET_TX_FIFO_FULL_FLAG(SPI_FLASH_PORT))
;;;295            {
;;;296    //						printf("write data:%d to spi\n", g_au8SlvData[i]);
;;;297                SPI_WRITE_TX(SPI_FLASH_PORT, g_au8SlvData[i++]);
000048  4b0a              LDR      r3,|L6.116|
                  |L6.74|
00004a  6946              LDR      r6,[r0,#0x14]         ;294
00004c  03b6              LSLS     r6,r6,#14             ;294
00004e  d4fc              BMI      |L6.74|
000050  5c9e              LDRB     r6,[r3,r2]
000052  6206              STR      r6,[r0,#0x20]
000054  1c52              ADDS     r2,r2,#1
;;;298                if(i >= u32DataSize)
000056  428a              CMP      r2,r1
000058  d3f7              BCC      |L6.74|
                  |L6.90|
;;;299    							break;
;;;300            }
;;;301        }
;;;302    
;;;303        // wait tx finish
;;;304        while(SPI_IS_BUSY(SPI_FLASH_PORT));
00005a  6941              LDR      r1,[r0,#0x14]
00005c  07c9              LSLS     r1,r1,#31
00005e  d1fc              BNE      |L6.90|
;;;305    
;;;306        // /CS: de-active
;;;307        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
000060  6881              LDR      r1,[r0,#8]
000062  43a1              BICS     r1,r1,r4
000064  4329              ORRS     r1,r1,r5
000066  6081              STR      r1,[r0,#8]
;;;308    
;;;309        SPI_ClearRxFIFO(SPI_FLASH_PORT);
000068  f7fffffe          BL       SPI_ClearRxFIFO
;;;310    }
00006c  bdf8              POP      {r3-r7,pc}
;;;311    
                          ENDP

00006e  0000              DCW      0x0000
                  |L6.112|
                          DCD      0x40061000
                  |L6.116|
                          DCD      g_au8SlvData

                          AREA ||i.SpiFlash_NormalRead||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalRead PROC
;;;311    
;;;312    void SpiFlash_NormalRead(uint32_t StartAddress, uint32_t u32DataSize)
000000  b570              PUSH     {r4-r6,lr}
;;;313    {
;;;314        uint32_t i;
;;;315    
;;;316        // /CS: active
;;;317        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000002  4c17              LDR      r4,|L7.96|
000004  460d              MOV      r5,r1                 ;313
000006  68a1              LDR      r1,[r4,#8]
000008  220c              MOVS     r2,#0xc
00000a  4391              BICS     r1,r1,r2
00000c  2201              MOVS     r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  60a1              STR      r1,[r4,#8]
;;;318    
;;;319        // send Command: 0x03, Read data
;;;320        SPI_WRITE_TX(SPI_FLASH_PORT, 0x03);
000012  2103              MOVS     r1,#3
000014  6221              STR      r1,[r4,#0x20]
;;;321    
;;;322        // send 24-bit start address
;;;323        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000016  0201              LSLS     r1,r0,#8
000018  0e09              LSRS     r1,r1,#24
00001a  6221              STR      r1,[r4,#0x20]
;;;324        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
00001c  0401              LSLS     r1,r0,#16
00001e  0e09              LSRS     r1,r1,#24
000020  6221              STR      r1,[r4,#0x20]
;;;325        SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
000022  b2c0              UXTB     r0,r0
000024  6220              STR      r0,[r4,#0x20]
                  |L7.38|
;;;326    
;;;327        while(SPI_IS_BUSY(SPI_FLASH_PORT))
000026  6960              LDR      r0,[r4,#0x14]
000028  07c0              LSLS     r0,r0,#31
00002a  d1fc              BNE      |L7.38|
;;;328    			;
;;;329        // clear RX buffer
;;;330        SPI_ClearRxFIFO(SPI_FLASH_PORT);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       SPI_ClearRxFIFO
;;;331    
;;;332        // read data
;;;333        for(i = 0; i < u32DataSize; i++)
000032  2200              MOVS     r2,#0
000034  4611              MOV      r1,r2
;;;334        {
;;;335            SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
;;;336            while(SPI_IS_BUSY(SPI_FLASH_PORT))
;;;337    					;
;;;338            g_u8CompareData[i] = SPI_READ_RX(SPI_FLASH_PORT);
000036  4e0b              LDR      r6,|L7.100|
000038  e006              B        |L7.72|
                  |L7.58|
00003a  6221              STR      r1,[r4,#0x20]         ;335
                  |L7.60|
00003c  6963              LDR      r3,[r4,#0x14]         ;336
00003e  07d8              LSLS     r0,r3,#31             ;336
000040  d1fc              BNE      |L7.60|
000042  6b20              LDR      r0,[r4,#0x30]
000044  54b0              STRB     r0,[r6,r2]
000046  1c52              ADDS     r2,r2,#1
                  |L7.72|
000048  42aa              CMP      r2,r5                 ;333
00004a  d3f6              BCC      |L7.58|
                  |L7.76|
;;;339    //				printf("read data:%d from spi\n", g_u8CompareData[i]);
;;;340        }
;;;341    
;;;342        // wait tx finish
;;;343        while(SPI_IS_BUSY(SPI_FLASH_PORT))
00004c  6960              LDR      r0,[r4,#0x14]
00004e  07c0              LSLS     r0,r0,#31
000050  d1fc              BNE      |L7.76|
;;;344    			;
;;;345    
;;;346        // /CS: de-active
;;;347        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
000052  68a0              LDR      r0,[r4,#8]
000054  2108              MOVS     r1,#8
000056  4388              BICS     r0,r0,r1
000058  2105              MOVS     r1,#5
00005a  4308              ORRS     r0,r0,r1
00005c  60a0              STR      r0,[r4,#8]
;;;348    }
00005e  bd70              POP      {r4-r6,pc}
;;;349    
                          ENDP

                  |L7.96|
                          DCD      0x40061000
                  |L7.100|
                          DCD      g_u8CompareData

                          AREA ||i.SpiFlash_ReadMidDid||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadMidDid PROC
;;;25     
;;;26     uint16_t SpiFlash_ReadMidDid(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;27     {
;;;28     		uint8_t u8RxData[6], u8IDCnt = 0;
;;;29     
;;;30         // /CS: active
;;;31         SPI_SET_SS_LOW(SPI_FLASH_PORT);
000002  4912              LDR      r1,|L8.76|
000004  2000              MOVS     r0,#0                 ;28
000006  688a              LDR      r2,[r1,#8]
000008  230c              MOVS     r3,#0xc
00000a  439a              BICS     r2,r2,r3
00000c  2301              MOVS     r3,#1
00000e  431a              ORRS     r2,r2,r3
000010  608a              STR      r2,[r1,#8]
;;;32     
;;;33         // send Command: 0x90, Read Manufacturer/Device ID
;;;34         SPI_WRITE_TX(SPI_FLASH_PORT, 0x90);
000012  2290              MOVS     r2,#0x90
000014  620a              STR      r2,[r1,#0x20]
;;;35     
;;;36         // send 24-bit '0', dummy
;;;37         SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000016  6208              STR      r0,[r1,#0x20]
;;;38         SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000018  6208              STR      r0,[r1,#0x20]
;;;39         SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
00001a  6208              STR      r0,[r1,#0x20]
;;;40     
;;;41         // receive 16-bit
;;;42         SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
00001c  6208              STR      r0,[r1,#0x20]
;;;43         SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
00001e  6208              STR      r0,[r1,#0x20]
                  |L8.32|
;;;44     
;;;45         // wait tx finish
;;;46         while(SPI_IS_BUSY(SPI_FLASH_PORT));
000020  694a              LDR      r2,[r1,#0x14]
000022  07d2              LSLS     r2,r2,#31
000024  d1fc              BNE      |L8.32|
;;;47     
;;;48         // /CS: de-active
;;;49         SPI_SET_SS_HIGH(SPI_FLASH_PORT);
000026  688a              LDR      r2,[r1,#8]
000028  2308              MOVS     r3,#8
00002a  439a              BICS     r2,r2,r3
00002c  2305              MOVS     r3,#5
00002e  431a              ORRS     r2,r2,r3
000030  608a              STR      r2,[r1,#8]
000032  466b              MOV      r3,sp                 ;28
;;;50     
;;;51         while(!SPI_GET_RX_FIFO_EMPTY_FLAG(SPI_FLASH_PORT))
000034  e003              B        |L8.62|
                  |L8.54|
;;;52             u8RxData[u8IDCnt ++] = SPI_READ_RX(SPI_FLASH_PORT);
000036  6b0a              LDR      r2,[r1,#0x30]
000038  541a              STRB     r2,[r3,r0]
00003a  1c40              ADDS     r0,r0,#1
00003c  b2c0              UXTB     r0,r0
                  |L8.62|
00003e  694a              LDR      r2,[r1,#0x14]         ;51
000040  05d2              LSLS     r2,r2,#23             ;51
000042  d5f8              BPL      |L8.54|
;;;53     
;;;54         return ( (u8RxData[4]<<8) | u8RxData[5] );
000044  8898              LDRH     r0,[r3,#4]
000046  ba40              REV16    r0,r0
;;;55     }
000048  bd0c              POP      {r2,r3,pc}
;;;56     
                          ENDP

00004a  0000              DCW      0x0000
                  |L8.76|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_ReadStatusReg||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadStatusReg PROC
;;;195    
;;;196    uint8_t SpiFlash_ReadStatusReg(void)
000000  480b              LDR      r0,|L9.48|
;;;197    {
;;;198        // /CS: active
;;;199        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000002  6881              LDR      r1,[r0,#8]
000004  220c              MOVS     r2,#0xc
000006  4391              BICS     r1,r1,r2
000008  2201              MOVS     r2,#1
00000a  4311              ORRS     r1,r1,r2
00000c  6081              STR      r1,[r0,#8]
;;;200    
;;;201        // send Command: 0x05, Read status register
;;;202        SPI_WRITE_TX(SPI_FLASH_PORT, 0x05);
00000e  2205              MOVS     r2,#5
000010  6202              STR      r2,[r0,#0x20]
;;;203    
;;;204        // read status
;;;205        SPI_WRITE_TX(SPI_FLASH_PORT, 0x00);
000012  2100              MOVS     r1,#0
000014  6201              STR      r1,[r0,#0x20]
                  |L9.22|
;;;206    
;;;207        // wait tx finish
;;;208        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000016  6941              LDR      r1,[r0,#0x14]
000018  07c9              LSLS     r1,r1,#31
00001a  d1fc              BNE      |L9.22|
;;;209    
;;;210        // /CS: de-active
;;;211        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001c  6881              LDR      r1,[r0,#8]
00001e  2308              MOVS     r3,#8
000020  4399              BICS     r1,r1,r3
000022  4311              ORRS     r1,r1,r2
000024  6081              STR      r1,[r0,#8]
;;;212    
;;;213        // skip first rx data
;;;214        SPI_READ_RX(SPI_FLASH_PORT);
000026  6b01              LDR      r1,[r0,#0x30]
;;;215    
;;;216        return (SPI_READ_RX(SPI_FLASH_PORT) & 0xff);
000028  6b00              LDR      r0,[r0,#0x30]
00002a  b2c0              UXTB     r0,r0
;;;217    }
00002c  4770              BX       lr
;;;218    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_SectorErase||, CODE, READONLY, ALIGN=2

                  SpiFlash_SectorErase PROC
;;;128    
;;;129    void SpiFlash_SectorErase(uint32_t StartAddress)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4601              MOV      r1,r0
;;;131        // /CS: active
;;;132        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000004  4814              LDR      r0,|L10.88|
000006  6882              LDR      r2,[r0,#8]
000008  250c              MOVS     r5,#0xc
00000a  43aa              BICS     r2,r2,r5
00000c  2601              MOVS     r6,#1
00000e  4332              ORRS     r2,r2,r6
000010  6082              STR      r2,[r0,#8]
;;;133    
;;;134        // send Command: 0x06, Write enable
;;;135        SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000012  2206              MOVS     r2,#6
000014  6202              STR      r2,[r0,#0x20]
                  |L10.22|
;;;136    
;;;137        // wait tx finish
;;;138        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000016  6942              LDR      r2,[r0,#0x14]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L10.22|
;;;139    
;;;140        // /CS: de-active
;;;141        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001c  6882              LDR      r2,[r0,#8]
00001e  2308              MOVS     r3,#8
000020  439a              BICS     r2,r2,r3
000022  2405              MOVS     r4,#5
000024  4322              ORRS     r2,r2,r4
000026  6082              STR      r2,[r0,#8]
;;;142    
;;;143        //////////////////////////////////////////
;;;144    
;;;145        // /CS: active
;;;146        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000028  6882              LDR      r2,[r0,#8]
00002a  43aa              BICS     r2,r2,r5
00002c  4332              ORRS     r2,r2,r6
00002e  6082              STR      r2,[r0,#8]
;;;147    
;;;148        // send Command: 0x20, Sector Erase
;;;149        SPI_WRITE_TX(SPI_FLASH_PORT, 0x20);
000030  2220              MOVS     r2,#0x20
000032  6202              STR      r2,[r0,#0x20]
;;;150    
;;;151        // send 24-bit start address
;;;152        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>16) & 0xFF);
000034  020a              LSLS     r2,r1,#8
000036  0e12              LSRS     r2,r2,#24
000038  6202              STR      r2,[r0,#0x20]
;;;153        SPI_WRITE_TX(SPI_FLASH_PORT, (StartAddress>>8)  & 0xFF);
00003a  040a              LSLS     r2,r1,#16
00003c  0e12              LSRS     r2,r2,#24
00003e  6202              STR      r2,[r0,#0x20]
;;;154        SPI_WRITE_TX(SPI_FLASH_PORT, StartAddress       & 0xFF);
000040  b2c9              UXTB     r1,r1
000042  6201              STR      r1,[r0,#0x20]
                  |L10.68|
;;;155    
;;;156        // wait tx finish
;;;157        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000044  6941              LDR      r1,[r0,#0x14]
000046  07c9              LSLS     r1,r1,#31
000048  d1fc              BNE      |L10.68|
;;;158    
;;;159        // /CS: de-active
;;;160        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00004a  6881              LDR      r1,[r0,#8]
00004c  4399              BICS     r1,r1,r3
00004e  4321              ORRS     r1,r1,r4
000050  6081              STR      r1,[r0,#8]
;;;161    
;;;162        SPI_ClearRxFIFO(SPI_FLASH_PORT);
000052  f7fffffe          BL       SPI_ClearRxFIFO
;;;163    }
000056  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP

                  |L10.88|
                          DCD      0x40061000

                          AREA ||i.SpiFlash_WaitReady||, CODE, READONLY, ALIGN=1

                  SpiFlash_WaitReady PROC
;;;250    
;;;251    void SpiFlash_WaitReady(void)
000000  b500              PUSH     {lr}
                  |L11.2|
;;;252    {
;;;253        uint8_t ReturnValue;
;;;254    
;;;255        do
;;;256        {
;;;257            ReturnValue = SpiFlash_ReadStatusReg();
000002  f7fffffe          BL       SpiFlash_ReadStatusReg
;;;258            ReturnValue = ReturnValue & 1;
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;259        }
;;;260        while(ReturnValue!=0);   // check the BUSY bit
00000a  d1fa              BNE      |L11.2|
;;;261    }
00000c  bd00              POP      {pc}
;;;262    
                          ENDP


                          AREA ||i.SpiFlash_WriteStatusReg||, CODE, READONLY, ALIGN=2

                  SpiFlash_WriteStatusReg PROC
;;;218    
;;;219    void SpiFlash_WriteStatusReg(uint8_t u8Value)
000000  b570              PUSH     {r4-r6,lr}
;;;220    {
;;;221        // /CS: active
;;;222        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000002  4910              LDR      r1,|L12.68|
000004  688a              LDR      r2,[r1,#8]
000006  240c              MOVS     r4,#0xc
000008  43a2              BICS     r2,r2,r4
00000a  2301              MOVS     r3,#1
00000c  431a              ORRS     r2,r2,r3
00000e  608a              STR      r2,[r1,#8]
;;;223    
;;;224        // send Command: 0x06, Write enable
;;;225        SPI_WRITE_TX(SPI_FLASH_PORT, 0x06);
000010  2206              MOVS     r2,#6
000012  620a              STR      r2,[r1,#0x20]
                  |L12.20|
;;;226    
;;;227        // wait tx finish
;;;228        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000014  694a              LDR      r2,[r1,#0x14]
000016  07d2              LSLS     r2,r2,#31
000018  d1fc              BNE      |L12.20|
;;;229    
;;;230        // /CS: de-active
;;;231        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
00001a  688e              LDR      r6,[r1,#8]
00001c  2208              MOVS     r2,#8
00001e  4396              BICS     r6,r6,r2
000020  2505              MOVS     r5,#5
000022  432e              ORRS     r6,r6,r5
000024  608e              STR      r6,[r1,#8]
;;;232    
;;;233        ///////////////////////////////////////
;;;234    
;;;235        // /CS: active
;;;236        SPI_SET_SS_LOW(SPI_FLASH_PORT);
000026  688e              LDR      r6,[r1,#8]
000028  43a6              BICS     r6,r6,r4
00002a  431e              ORRS     r6,r6,r3
00002c  608e              STR      r6,[r1,#8]
;;;237    
;;;238        // send Command: 0x01, Write status register
;;;239        SPI_WRITE_TX(SPI_FLASH_PORT, 0x01);
00002e  620b              STR      r3,[r1,#0x20]
;;;240    
;;;241        // write status
;;;242        SPI_WRITE_TX(SPI_FLASH_PORT, u8Value);
000030  6208              STR      r0,[r1,#0x20]
                  |L12.50|
;;;243    
;;;244        // wait tx finish
;;;245        while(SPI_IS_BUSY(SPI_FLASH_PORT));
000032  6948              LDR      r0,[r1,#0x14]
000034  07c0              LSLS     r0,r0,#31
000036  d1fc              BNE      |L12.50|
;;;246    
;;;247        // /CS: de-active
;;;248        SPI_SET_SS_HIGH(SPI_FLASH_PORT);
000038  6888              LDR      r0,[r1,#8]
00003a  4390              BICS     r0,r0,r2
00003c  4328              ORRS     r0,r0,r5
00003e  6088              STR      r0,[r1,#8]
;;;249    }
000040  bd70              POP      {r4-r6,pc}
;;;250    
                          ENDP

000042  0000              DCW      0x0000
                  |L12.68|
                          DCD      0x40061000

;*** Start embedded assembler ***

#line 1 "..\\spi_transfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_spi_transfer_c_d0586190____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_spi_transfer_c_d0586190____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_spi_transfer_c_d0586190____REVSH|
#line 402
|__asm___14_spi_transfer_c_d0586190____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
