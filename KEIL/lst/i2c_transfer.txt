; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_transfer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_transfer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\rk3399_i2c_SPI_Flash -I.\RTE\_rk3399_i2c_SPI_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.3.10\Device\M031\Include -D__MICROLIB -D__UVISION_VERSION=532 -D_RTE_ -D_RTE_ -DxxDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\i2c_transfer.crf ..\i2c_transfer.c]
                          THUMB

                          AREA ||i.I2C0_Close||, CODE, READONLY, ALIGN=2

                  I2C0_Close PROC
;;;177    
;;;178    void I2C0_Close(void)
000000  b510              PUSH     {r4,lr}
;;;179    {
;;;180        /* Disable I2C0 interrupt and clear corresponding NVIC bit */
;;;181        I2C_DisableInt(I2C0);
000002  4c07              LDR      r4,|L1.32|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       I2C_DisableInt
00000a  2101              MOVS     r1,#1
00000c  4a05              LDR      r2,|L1.36|
00000e  0489              LSLS     r1,r1,#18
000010  6011              STR      r1,[r2,#0]
;;;182        NVIC_DisableIRQ(I2C0_IRQn);
;;;183    
;;;184        /* Disable I2C0 and close I2C0 clock */
;;;185        I2C_Close(I2C0);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_Close
;;;186        CLK_DisableModuleClock(I2C0_MODULE);
000018  4803              LDR      r0,|L1.40|
00001a  f7fffffe          BL       CLK_DisableModuleClock
;;;187    
;;;188    }
00001e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.32|
                          DCD      0x40080000
                  |L1.36|
                          DCD      0xe000e180
                  |L1.40|
                          DCD      0x40000008

                          AREA ||i.I2C0_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;24     /*---------------------------------------------------------------------------------------------------------*/
;;;25     void I2C0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27         uint32_t u32Status;
;;;28     
;;;29         u32Status = I2C_GET_STATUS(I2C0);
000002  4908              LDR      r1,|L2.36|
000004  68c8              LDR      r0,[r1,#0xc]
;;;30     
;;;31     //		printf("get status:%x\n", u32Status);
;;;32     	
;;;33         if(I2C_GET_TIMEOUT_FLAG(I2C0))
000006  694a              LDR      r2,[r1,#0x14]
000008  43d2              MVNS     r2,r2
00000a  07d2              LSLS     r2,r2,#31
00000c  d006              BEQ      |L2.28|
;;;34         {
;;;35             /* Clear I2C0 Timeout Flag */
;;;36             I2C_ClearTimeoutFlag(I2C0);
;;;37         }
;;;38         else
;;;39         {
;;;40             if(s_I2C0HandlerFn != NULL)
00000e  4906              LDR      r1,|L2.40|
000010  684a              LDR      r2,[r1,#4]  ; s_I2C0HandlerFn
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L2.26|
;;;41                 s_I2C0HandlerFn(u32Status);
000016  6849              LDR      r1,[r1,#4]  ; s_I2C0HandlerFn
000018  4788              BLX      r1
                  |L2.26|
;;;42         }
;;;43     }
00001a  bd10              POP      {r4,pc}
                  |L2.28|
00001c  4608              MOV      r0,r1                 ;36
00001e  f7fffffe          BL       I2C_ClearTimeoutFlag
000022  bd10              POP      {r4,pc}
;;;44     
                          ENDP

                  |L2.36|
                          DCD      0x40080000
                  |L2.40|
                          DCD      ||.data||

                          AREA ||i.I2C0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  I2C0_Init PROC
;;;149    
;;;150    void I2C0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;151    {
;;;152        /* Open I2C module and set bus clock */
;;;153        I2C_Open(I2C0, 400000);
000002  4c0f              LDR      r4,|L3.64|
000004  490d              LDR      r1,|L3.60|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Open
;;;154    
;;;155        /* Get I2C0 Bus Clock */
;;;156        printf("I2C clock %d Hz\n", I2C_GetBusClockFreq(I2C0));
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_GetBusClockFreq
000012  4601              MOV      r1,r0
000014  a00b              ADR      r0,|L3.68|
000016  f7fffffe          BL       __2printf
;;;157    
;;;158        /* Set I2C 4 Slave Addresses */
;;;159        I2C_SetSlaveAddr(I2C0, 0, 0x15, 0);   /* Slave Address : 0x15 */
00001a  2300              MOVS     r3,#0
00001c  2215              MOVS     r2,#0x15
00001e  4619              MOV      r1,r3
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       I2C_SetSlaveAddr
;;;160    #if 0
;;;161    		I2C_SetSlaveAddr(I2C0, 1, 0x35, 0);   /* Slave Address : 0x35 */
;;;162        I2C_SetSlaveAddr(I2C0, 2, 0x55, 0);   /* Slave Address : 0x55 */
;;;163        I2C_SetSlaveAddr(I2C0, 3, 0x75, 0);   /* Slave Address : 0x75 */
;;;164    
;;;165        I2C_SetSlaveAddrMask(I2C0, 0, 0x01);
;;;166        I2C_SetSlaveAddrMask(I2C0, 1, 0x04);
;;;167        I2C_SetSlaveAddrMask(I2C0, 2, 0x01);
;;;168        I2C_SetSlaveAddrMask(I2C0, 3, 0x04);
;;;169    #endif
;;;170        /* Enable I2C interrupt */
;;;171        I2C_EnableInt(I2C0);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       I2C_EnableInt
00002c  2001              MOVS     r0,#1
00002e  490a              LDR      r1,|L3.88|
000030  0480              LSLS     r0,r0,#18
000032  6008              STR      r0,[r1,#0]
;;;172        NVIC_EnableIRQ(I2C0_IRQn);
;;;173    		
;;;174    		/* I2C function to Slave receive/transmit data */
;;;175        s_I2C0HandlerFn = I2C_SlaveTRx;
000034  490a              LDR      r1,|L3.96|
000036  4809              LDR      r0,|L3.92|
000038  6048              STR      r0,[r1,#4]  ; s_I2C0HandlerFn
;;;176    }
00003a  bd10              POP      {r4,pc}
;;;177    
                          ENDP

                  |L3.60|
                          DCD      0x00061a80
                  |L3.64|
                          DCD      0x40080000
                  |L3.68|
000044  49324320          DCB      "I2C clock %d Hz\n",0
000048  636c6f63
00004c  6b202564
000050  20487a0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L3.88|
                          DCD      0xe000e100
                  |L3.92|
                          DCD      I2C_SlaveTRx
                  |L3.96|
                          DCD      ||.data||

                          AREA ||i.I2C_Rx_Write_To_SPI||, CODE, READONLY, ALIGN=1

                  I2C_Rx_Write_To_SPI PROC
;;;44     
;;;45     void I2C_Rx_Write_To_SPI(uint32_t u32DataSize, uint32_t u32FlashAddress)
000000  4770              BX       lr
;;;46     {
;;;47     //	printf("Start to normal write data to Flash ...");	
;;;48     	/* page program */
;;;49     
;;;50     //	printf("[OK]\n");
;;;51     
;;;52     //	printf("Normal read...");
;;;53     		/* page read */
;;;54     //	SpiFlash_NormalRead(u32FlashAddress, u32DataSize);
;;;55     //	printf("OK\n");
;;;56     	
;;;57     //	Compare(u32DataSize);
;;;58     
;;;59     //	printf("u32FlashAddress:%d\n", u32FlashAddress);
;;;60     }
;;;61     
                          ENDP


                          AREA ||i.I2C_SlaveTRx||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  I2C_SlaveTRx PROC
;;;64     /*---------------------------------------------------------------------------------------------------------*/
;;;65     void I2C_SlaveTRx(uint32_t u32Status)
000000  b5f8              PUSH     {r3-r7,lr}
;;;66     {
000002  2600              MOVS     r6,#0
;;;67     	uint8_t u8data;
;;;68     	static uint32_t u32Count = 0;
;;;69     //	printf("status:%x\n", u32Status);
;;;70     	switch (u32Status) {
;;;71     		case 0x60:		/* Own SLA+W has been receive; ACK has been return */
;;;72     			g_u8SlvDataLen = 0;
;;;73     		  u32Count = 0;
;;;74           I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
000004  273c              MOVS     r7,#0x3c
000006  4d45              LDR      r5,|L5.284|
000008  4c45              LDR      r4,|L5.288|
00000a  28a0              CMP      r0,#0xa0              ;70
                  |L5.12|
00000c  d006              BEQ      |L5.28|
00000e  dc06              BGT      |L5.30|
000010  2860              CMP      r0,#0x60              ;70
000012  d0fb              BEQ      |L5.12|
000014  2880              CMP      r0,#0x80              ;70
000016  d00d              BEQ      |L5.52|
000018  2888              CMP      r0,#0x88              ;70
00001a  d106              BNE      |L5.42|
                  |L5.28|
00001c  e07b              B        |L5.278|
                  |L5.30|
00001e  28a8              CMP      r0,#0xa8              ;70
000020  d054              BEQ      |L5.204|
000022  28b8              CMP      r0,#0xb8              ;70
000024  d060              BEQ      |L5.232|
000026  28c0              CMP      r0,#0xc0              ;70
000028  d068              BEQ      |L5.252|
                  |L5.42|
;;;75     		break;
;;;76     		case 0x80:	/* Previously address with own SLA address Data has been received; ACK has been returned*/
;;;77     			u8data = (unsigned char) I2C_GET_DATA(I2C0);
;;;78     //			printf("g_u8SlvDataLen:%d\n", g_u8SlvDataLen);
;;;79     			if (g_u8SlvDataLen < 7) {
;;;80     				g_au8SlvRxData[g_u8SlvDataLen++] = u8data;
;;;81     				read_write_flag = g_au8SlvRxData[0];
;;;82     				flash_addr = (g_au8SlvRxData[1] << 16) + (g_au8SlvRxData[2] << 8) + (g_au8SlvRxData[3]);
;;;83     				slave_buff_addr = (g_au8SlvRxData[4] << 16) + (g_au8SlvRxData[5] << 8) + (g_au8SlvRxData[6]);
;;;84     
;;;85     //				if (g_u8SlvDataLen == 4)
;;;86     //					printf("flash addr:%d\n", flash_addr);
;;;87     //				if (g_u8SlvDataLen == 7)
;;;88     //					printf("slave_buff_addr:%d\n", slave_buff_addr);
;;;89     
;;;90     			  if (g_u8SlvDataLen == 7 && read_write_flag == 0xff) {
;;;91     					printf("Normal read...");
;;;92     					/* page read */
;;;93     					SpiFlash_NormalRead(flash_addr, slave_buff_addr);
;;;94     					SpiFlash_WaitReady();
;;;95     					printf("OK\n");
;;;96     					}
;;;97     			}	else {
;;;98     //				printf("u32Count:%d\n", u32Count);
;;;99     				g_au8SlvData[u32Count++] = u8data;
;;;100    				if (u32Count == slave_buff_addr) {
;;;101    					printf("Start to normal write data to Flash ...");
;;;102    					SpiFlash_NormalPageProgram(flash_addr, slave_buff_addr);
;;;103    					SpiFlash_WaitReady();
;;;104    					u32Count = 0;
;;;105    					printf("OK\n");
;;;106    				} else if (u32Count > slave_buff_addr) {
;;;107    					printf("Error not left space\n");
;;;108    					u32Count = 0;
;;;109    				}
;;;110    			}
;;;111    			I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;112    		break;
;;;113    		case 0xA8:	/* Own SLA+R has been receive; ACK has been return */
;;;114    			  SpiFlash_WaitReady();
;;;115    				u8data = (unsigned char)I2C_GET_DATA(I2C0);
;;;116    				slave_buff_addr = 0;
;;;117    				//printf("send data:%x\n", g_au8SlvData[slave_buff_addr]);
;;;118    				I2C_SET_DATA(I2C0, slave_buff_addr);
;;;119    				I2C_SET_DATA(I2C0, g_u8SlvTxData[slave_buff_addr]);
;;;120            slave_buff_addr++;
;;;121            I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;122    		break;
;;;123    		case 0xB8:	/* Data byte in I2CDAT has been transmitted ACK has been received */
;;;124    			SpiFlash_WaitReady();
;;;125    			I2C_SET_DATA(I2C0, g_u8SlvTxData[slave_buff_addr++]);
;;;126          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;127    		break;
;;;128    		case 0xC0:	/* Data byte or last data in I2CDAT has been transmitted Not ACK has been received */
;;;129    			I2C_SET_DATA(I2C0, g_u8SlvTxData[slave_buff_addr++]);
;;;130    			slave_buff_addr = 0;
;;;131          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;132    		break;
;;;133    		case 0x88:	/* Previously addressed with own SLA address; NOT ACK has been returned */
;;;134    			g_u8SlvDataLen = 0;
;;;135    			u32Count = 0;
;;;136          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;137    		break;
;;;138    		case 0xA0:	/* A STOP or repeated START has been received while still addressed as Slave/Receiver*/
;;;139    			g_u8SlvDataLen = 0;
;;;140    			u32Count = 0;
;;;141          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;142    		break;
;;;143    		default:
;;;144    			printf("Status 0x%x is NOT processed\n", u32Status);
00002a  4601              MOV      r1,r0
00002c  a03d              ADR      r0,|L5.292|
00002e  f7fffffe          BL       __2printf
;;;145    		break;
;;;146    	}
;;;147    	return;
;;;148    }
000032  bdf8              POP      {r3-r7,pc}
                  |L5.52|
000034  68a8              LDR      r0,[r5,#8]            ;77
000036  b2c1              UXTB     r1,r0                 ;77
000038  7860              LDRB     r0,[r4,#1]            ;79  ; g_u8SlvDataLen
00003a  2807              CMP      r0,#7                 ;79
00003c  d228              BCS      |L5.144|
00003e  7862              LDRB     r2,[r4,#1]            ;80  ; g_u8SlvDataLen
000040  4837              LDR      r0,|L5.288|
000042  3014              ADDS     r0,r0,#0x14           ;80
000044  1883              ADDS     r3,r0,r2              ;80
000046  1c52              ADDS     r2,r2,#1              ;80
000048  7062              STRB     r2,[r4,#1]            ;80
00004a  7019              STRB     r1,[r3,#0]            ;80
00004c  7801              LDRB     r1,[r0,#0]            ;81  ; g_au8SlvRxData
00004e  7021              STRB     r1,[r4,#0]            ;81
000050  7841              LDRB     r1,[r0,#1]            ;82  ; g_au8SlvRxData
000052  7882              LDRB     r2,[r0,#2]            ;82  ; g_au8SlvRxData
000054  0409              LSLS     r1,r1,#16             ;82
000056  0212              LSLS     r2,r2,#8              ;82
000058  1889              ADDS     r1,r1,r2              ;82
00005a  78c2              LDRB     r2,[r0,#3]            ;82  ; g_au8SlvRxData
00005c  1889              ADDS     r1,r1,r2              ;82
00005e  6121              STR      r1,[r4,#0x10]         ;82  ; flash_addr
000060  7901              LDRB     r1,[r0,#4]            ;83  ; g_au8SlvRxData
000062  7942              LDRB     r2,[r0,#5]            ;83  ; g_au8SlvRxData
000064  0409              LSLS     r1,r1,#16             ;83
000066  0212              LSLS     r2,r2,#8              ;83
000068  7980              LDRB     r0,[r0,#6]            ;83  ; g_au8SlvRxData
00006a  1889              ADDS     r1,r1,r2              ;83
00006c  1808              ADDS     r0,r1,r0              ;83
00006e  60e0              STR      r0,[r4,#0xc]          ;83  ; slave_buff_addr
000070  7860              LDRB     r0,[r4,#1]            ;90  ; g_u8SlvDataLen
000072  2807              CMP      r0,#7                 ;90
000074  d14a              BNE      |L5.268|
000076  7820              LDRB     r0,[r4,#0]            ;90  ; read_write_flag
000078  28ff              CMP      r0,#0xff              ;90
00007a  d147              BNE      |L5.268|
00007c  a031              ADR      r0,|L5.324|
00007e  f7fffffe          BL       __2printf
000082  68e1              LDR      r1,[r4,#0xc]          ;93  ; slave_buff_addr
000084  6920              LDR      r0,[r4,#0x10]         ;93  ; flash_addr
000086  f7fffffe          BL       SpiFlash_NormalRead
00008a  f7fffffe          BL       SpiFlash_WaitReady
00008e  e011              B        |L5.180|
                  |L5.144|
000090  4830              LDR      r0,|L5.340|
000092  68a2              LDR      r2,[r4,#8]            ;99  ; u32Count
000094  5481              STRB     r1,[r0,r2]            ;99
000096  1c52              ADDS     r2,r2,#1              ;99
000098  60a2              STR      r2,[r4,#8]            ;100  ; u32Count
00009a  68e0              LDR      r0,[r4,#0xc]          ;100  ; slave_buff_addr
00009c  4282              CMP      r2,r0                 ;100
00009e  d10d              BNE      |L5.188|
0000a0  a02d              ADR      r0,|L5.344|
0000a2  f7fffffe          BL       __2printf
0000a6  68e1              LDR      r1,[r4,#0xc]          ;102  ; slave_buff_addr
0000a8  6920              LDR      r0,[r4,#0x10]         ;102  ; flash_addr
0000aa  f7fffffe          BL       SpiFlash_NormalPageProgram
0000ae  f7fffffe          BL       SpiFlash_WaitReady
0000b2  60a6              STR      r6,[r4,#8]            ;104  ; u32Count
                  |L5.180|
0000b4  a032              ADR      r0,|L5.384|
0000b6  f7fffffe          BL       __2printf
0000ba  e027              B        |L5.268|
                  |L5.188|
0000bc  68e0              LDR      r0,[r4,#0xc]          ;106  ; slave_buff_addr
0000be  4282              CMP      r2,r0                 ;106
0000c0  d924              BLS      |L5.268|
0000c2  a030              ADR      r0,|L5.388|
0000c4  f7fffffe          BL       __2printf
                  |L5.200|
0000c8  60a6              STR      r6,[r4,#8]            ;73  ; u32Count
0000ca  e01f              B        |L5.268|
                  |L5.204|
0000cc  f7fffffe          BL       SpiFlash_WaitReady
0000d0  68a8              LDR      r0,[r5,#8]            ;115
0000d2  60e6              STR      r6,[r4,#0xc]          ;116  ; slave_buff_addr
0000d4  68e0              LDR      r0,[r4,#0xc]          ;118  ; slave_buff_addr
0000d6  60a8              STR      r0,[r5,#8]            ;118
0000d8  4830              LDR      r0,|L5.412|
0000da  68e1              LDR      r1,[r4,#0xc]          ;119  ; slave_buff_addr
0000dc  5c40              LDRB     r0,[r0,r1]            ;119
0000de  60a8              STR      r0,[r5,#8]            ;119
0000e0  68e0              LDR      r0,[r4,#0xc]          ;120  ; slave_buff_addr
0000e2  1c40              ADDS     r0,r0,#1              ;120
0000e4  60e0              STR      r0,[r4,#0xc]          ;120  ; slave_buff_addr
0000e6  e011              B        |L5.268|
                  |L5.232|
0000e8  f7fffffe          BL       SpiFlash_WaitReady
0000ec  68e0              LDR      r0,[r4,#0xc]          ;125  ; slave_buff_addr
0000ee  492b              LDR      r1,|L5.412|
0000f0  1809              ADDS     r1,r1,r0              ;125
0000f2  1c40              ADDS     r0,r0,#1              ;125
0000f4  60e0              STR      r0,[r4,#0xc]          ;125  ; slave_buff_addr
0000f6  7808              LDRB     r0,[r1,#0]            ;125
0000f8  60a8              STR      r0,[r5,#8]            ;125
0000fa  e007              B        |L5.268|
                  |L5.252|
0000fc  68e0              LDR      r0,[r4,#0xc]          ;129  ; slave_buff_addr
0000fe  4927              LDR      r1,|L5.412|
000100  1809              ADDS     r1,r1,r0              ;129
000102  1c40              ADDS     r0,r0,#1              ;129
000104  60e0              STR      r0,[r4,#0xc]          ;129  ; slave_buff_addr
000106  7808              LDRB     r0,[r1,#0]            ;129
000108  60a8              STR      r0,[r5,#8]            ;129
00010a  60e6              STR      r6,[r4,#0xc]          ;130  ; slave_buff_addr
                  |L5.268|
00010c  6828              LDR      r0,[r5,#0]            ;141
00010e  43b8              BICS     r0,r0,r7              ;141
000110  300c              ADDS     r0,r0,#0xc            ;141
000112  6028              STR      r0,[r5,#0]            ;141
000114  bdf8              POP      {r3-r7,pc}
                  |L5.278|
000116  7066              STRB     r6,[r4,#1]            ;139
000118  e7d6              B        |L5.200|
;;;149    
                          ENDP

00011a  0000              DCW      0x0000
                  |L5.284|
                          DCD      0x40080000
                  |L5.288|
                          DCD      ||.data||
                  |L5.292|
000124  53746174          DCB      "Status 0x%x is NOT processed\n",0
000128  75732030
00012c  78257820
000130  6973204e
000134  4f542070
000138  726f6365
00013c  73736564
000140  0a00    
000142  00                DCB      0
000143  00                DCB      0
                  |L5.324|
000144  4e6f726d          DCB      "Normal read...",0
000148  616c2072
00014c  6561642e
000150  2e2e00  
000153  00                DCB      0
                  |L5.340|
                          DCD      ||.bss||
                  |L5.344|
000158  53746172          DCB      "Start to normal write data to Flash ...",0
00015c  7420746f
000160  206e6f72
000164  6d616c20
000168  77726974
00016c  65206461
000170  74612074
000174  6f20466c
000178  61736820
00017c  2e2e2e00
                  |L5.384|
000180  4f4b0a00          DCB      "OK\n",0
                  |L5.388|
000184  4572726f          DCB      "Error not left space\n",0
000188  72206e6f
00018c  74206c65
000190  66742073
000194  70616365
000198  0a00    
00019a  00                DCB      0
00019b  00                DCB      0
                  |L5.412|
                          DCD      ||.bss||+0x100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_au8SlvData
                          %        256
                  g_u8SlvTxData
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  read_write_flag
000000  00                DCB      0x00
                  g_u8SlvDataLen
000001  000000            DCB      0x00,0x00,0x00
                  s_I2C0HandlerFn
                          DCD      0x00000000
                  u32Count
                          DCD      0x00000000
                  slave_buff_addr
                          DCD      0x00000000
                  flash_addr
                          DCD      0x00000000
                  g_au8SlvRxData
                          DCD      0x00000000
000018  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  g_u8DeviceAddr
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\i2c_transfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_i2c_transfer_c_b80b4882____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_i2c_transfer_c_b80b4882____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_i2c_transfer_c_b80b4882____REVSH|
#line 402
|__asm___14_i2c_transfer_c_b80b4882____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
