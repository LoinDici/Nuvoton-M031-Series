; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\i2c_transfer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\i2c_transfer.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\rk3399_i2c_SPI_Flash -I.\RTE\_rk3399_i2c_SPI_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Nuvoton\NuMicro_DFP\1.3.10\Device\M031\Include -D__MICROLIB -D__UVISION_VERSION=532 -D_RTE_ -D_RTE_ -DxxDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\i2c_transfer.crf ..\i2c_transfer.c]
                          THUMB

                          AREA ||i.I2C0_Close||, CODE, READONLY, ALIGN=2

                  I2C0_Close PROC
;;;160    
;;;161    void I2C0_Close(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163        /* Disable I2C0 interrupt and clear corresponding NVIC bit */
;;;164        I2C_DisableInt(I2C0);
000002  4c07              LDR      r4,|L1.32|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       I2C_DisableInt
00000a  2101              MOVS     r1,#1
00000c  4a05              LDR      r2,|L1.36|
00000e  0489              LSLS     r1,r1,#18
000010  6011              STR      r1,[r2,#0]
;;;165        NVIC_DisableIRQ(I2C0_IRQn);
;;;166    
;;;167        /* Disable I2C0 and close I2C0 clock */
;;;168        I2C_Close(I2C0);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_Close
;;;169        CLK_DisableModuleClock(I2C0_MODULE);
000018  4803              LDR      r0,|L1.40|
00001a  f7fffffe          BL       CLK_DisableModuleClock
;;;170    
;;;171    }
00001e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.32|
                          DCD      0x40080000
                  |L1.36|
                          DCD      0xe000e180
                  |L1.40|
                          DCD      0x40000008

                          AREA ||i.I2C0_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C0_IRQHandler PROC
;;;22     /*---------------------------------------------------------------------------------------------------------*/
;;;23     void I2C0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;24     {
;;;25         uint32_t u32Status;
;;;26     
;;;27         u32Status = I2C_GET_STATUS(I2C0);
000002  4908              LDR      r1,|L2.36|
000004  68c8              LDR      r0,[r1,#0xc]
;;;28     
;;;29     //		printf("get status:%x\n", u32Status);
;;;30     	
;;;31         if(I2C_GET_TIMEOUT_FLAG(I2C0))
000006  694a              LDR      r2,[r1,#0x14]
000008  43d2              MVNS     r2,r2
00000a  07d2              LSLS     r2,r2,#31
00000c  d006              BEQ      |L2.28|
;;;32         {
;;;33             /* Clear I2C0 Timeout Flag */
;;;34             I2C_ClearTimeoutFlag(I2C0);
;;;35         }
;;;36         else
;;;37         {
;;;38             if(s_I2C0HandlerFn != NULL)
00000e  4906              LDR      r1,|L2.40|
000010  684a              LDR      r2,[r1,#4]  ; s_I2C0HandlerFn
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L2.26|
;;;39                 s_I2C0HandlerFn(u32Status);
000016  6849              LDR      r1,[r1,#4]  ; s_I2C0HandlerFn
000018  4788              BLX      r1
                  |L2.26|
;;;40         }
;;;41     }
00001a  bd10              POP      {r4,pc}
                  |L2.28|
00001c  4608              MOV      r0,r1                 ;34
00001e  f7fffffe          BL       I2C_ClearTimeoutFlag
000022  bd10              POP      {r4,pc}
;;;42     
                          ENDP

                  |L2.36|
                          DCD      0x40080000
                  |L2.40|
                          DCD      ||.data||

                          AREA ||i.I2C0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  I2C0_Init PROC
;;;132    
;;;133    void I2C0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135        /* Open I2C module and set bus clock */
;;;136        I2C_Open(I2C0, 400000);
000002  4c0f              LDR      r4,|L3.64|
000004  490d              LDR      r1,|L3.60|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       I2C_Open
;;;137    
;;;138        /* Get I2C0 Bus Clock */
;;;139        printf("I2C clock %d Hz\n", I2C_GetBusClockFreq(I2C0));
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       I2C_GetBusClockFreq
000012  4601              MOV      r1,r0
000014  a00b              ADR      r0,|L3.68|
000016  f7fffffe          BL       __2printf
;;;140    
;;;141        /* Set I2C 4 Slave Addresses */
;;;142        I2C_SetSlaveAddr(I2C0, 0, 0x15, 0);   /* Slave Address : 0x15 */
00001a  2300              MOVS     r3,#0
00001c  2215              MOVS     r2,#0x15
00001e  4619              MOV      r1,r3
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       I2C_SetSlaveAddr
;;;143    #if 0
;;;144    		I2C_SetSlaveAddr(I2C0, 1, 0x35, 0);   /* Slave Address : 0x35 */
;;;145        I2C_SetSlaveAddr(I2C0, 2, 0x55, 0);   /* Slave Address : 0x55 */
;;;146        I2C_SetSlaveAddr(I2C0, 3, 0x75, 0);   /* Slave Address : 0x75 */
;;;147    
;;;148        I2C_SetSlaveAddrMask(I2C0, 0, 0x01);
;;;149        I2C_SetSlaveAddrMask(I2C0, 1, 0x04);
;;;150        I2C_SetSlaveAddrMask(I2C0, 2, 0x01);
;;;151        I2C_SetSlaveAddrMask(I2C0, 3, 0x04);
;;;152    #endif
;;;153        /* Enable I2C interrupt */
;;;154        I2C_EnableInt(I2C0);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       I2C_EnableInt
00002c  2001              MOVS     r0,#1
00002e  490a              LDR      r1,|L3.88|
000030  0480              LSLS     r0,r0,#18
000032  6008              STR      r0,[r1,#0]
;;;155        NVIC_EnableIRQ(I2C0_IRQn);
;;;156    		
;;;157    		/* I2C function to Slave receive/transmit data */
;;;158        s_I2C0HandlerFn = I2C_SlaveTRx;
000034  490a              LDR      r1,|L3.96|
000036  4809              LDR      r0,|L3.92|
000038  6048              STR      r0,[r1,#4]  ; s_I2C0HandlerFn
;;;159    }
00003a  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  |L3.60|
                          DCD      0x00061a80
                  |L3.64|
                          DCD      0x40080000
                  |L3.68|
000044  49324320          DCB      "I2C clock %d Hz\n",0
000048  636c6f63
00004c  6b202564
000050  20487a0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L3.88|
                          DCD      0xe000e100
                  |L3.92|
                          DCD      I2C_SlaveTRx
                  |L3.96|
                          DCD      ||.data||

                          AREA ||i.I2C_Rx_Write_To_SPI||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  I2C_Rx_Write_To_SPI PROC
;;;42     
;;;43     void I2C_Rx_Write_To_SPI(uint32_t u32DataSize)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
000002  4605              MOV      r5,r0
;;;45     	static	uint32_t u32FlashAddress = 0;
;;;46     	
;;;47     	printf("Start to normal write data to Flash ...");	
000004  a010              ADR      r0,|L4.72|
000006  f7fffffe          BL       __2printf
;;;48     	/* page program */
;;;49     	SpiFlash_NormalPageProgram(u32FlashAddress, u32DataSize);
00000a  4c19              LDR      r4,|L4.112|
00000c  4629              MOV      r1,r5
00000e  68a0              LDR      r0,[r4,#8]  ; u32FlashAddress
000010  f7fffffe          BL       SpiFlash_NormalPageProgram
;;;50     	SpiFlash_WaitReady();
000014  f7fffffe          BL       SpiFlash_WaitReady
;;;51     	printf("[OK]\n");
000018  a016              ADR      r0,|L4.116|
00001a  f7fffffe          BL       __2printf
;;;52     
;;;53     	printf("Normal read...");
00001e  a017              ADR      r0,|L4.124|
000020  f7fffffe          BL       __2printf
;;;54     		/* page read */
;;;55     	SpiFlash_NormalRead(u32FlashAddress, u32DataSize);
000024  4629              MOV      r1,r5
000026  68a0              LDR      r0,[r4,#8]  ; u32FlashAddress
000028  f7fffffe          BL       SpiFlash_NormalRead
;;;56     	printf("OK\n");
00002c  a017              ADR      r0,|L4.140|
00002e  f7fffffe          BL       __2printf
;;;57     	
;;;58     	Compare(u32DataSize);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       Compare
;;;59     	u32FlashAddress += u32DataSize;
000038  68a0              LDR      r0,[r4,#8]  ; u32FlashAddress
00003a  1941              ADDS     r1,r0,r5
;;;60     	printf("u32FlashAddress:%d\n", u32FlashAddress);
00003c  a014              ADR      r0,|L4.144|
00003e  60a1              STR      r1,[r4,#8]  ; u32FlashAddress
000040  f7fffffe          BL       __2printf
;;;61     }
000044  bd70              POP      {r4-r6,pc}
;;;62     
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
000048  53746172          DCB      "Start to normal write data to Flash ...",0
00004c  7420746f
000050  206e6f72
000054  6d616c20
000058  77726974
00005c  65206461
000060  74612074
000064  6f20466c
000068  61736820
00006c  2e2e2e00
                  |L4.112|
                          DCD      ||.data||
                  |L4.116|
000074  5b4f4b5d          DCB      "[OK]\n",0
000078  0a00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L4.124|
00007c  4e6f726d          DCB      "Normal read...",0
000080  616c2072
000084  6561642e
000088  2e2e00  
00008b  00                DCB      0
                  |L4.140|
00008c  4f4b0a00          DCB      "OK\n",0
                  |L4.144|
000090  75333246          DCB      "u32FlashAddress:%d\n",0
000094  6c617368
000098  41646472
00009c  6573733a
0000a0  25640a00

                          AREA ||i.I2C_SlaveTRx||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  I2C_SlaveTRx PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     void I2C_SlaveTRx(uint32_t u32Status)
000000  b5f8              PUSH     {r3-r7,lr}
;;;67     {
000002  2600              MOVS     r6,#0
;;;68     	uint8_t u8data;
;;;69     	static uint32_t u32Count = 0;
;;;70     //	printf("status:%x\n", u32Status);
;;;71     	switch (u32Status) {
;;;72     		case 0x60:		/* Own SLA+W has been receive; ACK has been return */
;;;73     			g_u8SlvDataLen = 0;
;;;74     		  u32Count = 0;
;;;75           I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
000004  273c              MOVS     r7,#0x3c
000006  4d35              LDR      r5,|L5.220|
000008  4c35              LDR      r4,|L5.224|
00000a  28a0              CMP      r0,#0xa0              ;71
00000c  d064              BEQ      |L5.216|
00000e  dc06              BGT      |L5.30|
000010  2860              CMP      r0,#0x60              ;71
000012  d061              BEQ      |L5.216|
000014  2880              CMP      r0,#0x80              ;71
000016  d00d              BEQ      |L5.52|
000018  2888              CMP      r0,#0x88              ;71
00001a  d106              BNE      |L5.42|
00001c  e05c              B        |L5.216|
                  |L5.30|
00001e  28a8              CMP      r0,#0xa8              ;71
000020  d035              BEQ      |L5.142|
000022  28b8              CMP      r0,#0xb8              ;71
000024  d043              BEQ      |L5.174|
000026  28c0              CMP      r0,#0xc0              ;71
000028  d049              BEQ      |L5.190|
                  |L5.42|
;;;76     		break;
;;;77     		case 0x80:	/* Previously address with own SLA address Data has been received; ACK has been returned*/
;;;78     			u8data = (unsigned char) I2C_GET_DATA(I2C0);
;;;79     //			printf("g_u8SlvDataLen:%d\n", g_u8SlvDataLen);
;;;80     			if (g_u8SlvDataLen < 3) {
;;;81     				g_au8SlvRxData[g_u8SlvDataLen++] = u8data;
;;;82     				slave_buff_addr = (g_au8SlvRxData[0] << 16) + (g_au8SlvRxData[1] << 8) + (g_au8SlvRxData[2]);
;;;83     				printf("slave_buff_addr:%d\n", slave_buff_addr);
;;;84     			} else {
;;;85     //				printf("u32Count:%d\n", u32Count);
;;;86     				g_au8SlvData[u32Count++] = u8data;
;;;87     				if (u32Count == slave_buff_addr) {
;;;88     					I2C_Rx_Write_To_SPI(slave_buff_addr);
;;;89     					u32Count = 0;
;;;90     				} else if (u32Count > slave_buff_addr) {
;;;91     					printf("Error not left space\n");
;;;92     					u32Count = 0;
;;;93     				}
;;;94     			}
;;;95     			I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;96     		break;
;;;97     		case 0xA8:	/* Own SLA+R has been receive; ACK has been return */
;;;98     				u8data = (unsigned char)I2C_GET_DATA(I2C0);
;;;99     				printf("ststus 0xa8 get data:%d\n", u8data);
;;;100    				slave_buff_addr = 0;
;;;101    				//printf("send data:%x\n", g_au8SlvData[slave_buff_addr]);
;;;102    				I2C_SET_DATA(I2C0, slave_buff_addr);
;;;103    				I2C_SET_DATA(I2C0, g_u8CompareData[slave_buff_addr]);
;;;104            slave_buff_addr++;
;;;105            I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;106    		break;
;;;107    		case 0xB8:	/* Data byte in I2CDAT has been transmitted ACK has been received */
;;;108    			I2C_SET_DATA(I2C0, g_u8CompareData[slave_buff_addr++]);
;;;109          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;110    		break;
;;;111    		case 0xC0:	/* Data byte or last data in I2CDAT has been transmitted Not ACK has been received */
;;;112    			I2C_SET_DATA(I2C0, g_u8CompareData[slave_buff_addr++]);
;;;113    			slave_buff_addr = 0;
;;;114          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;115    		break;
;;;116    		case 0x88:	/* Previously addressed with own SLA address; NOT ACK has been returned */
;;;117    			g_u8SlvDataLen = 0;
;;;118    			u32Count = 0;
;;;119          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;120    		break;
;;;121    		case 0xA0:	/* A STOP or repeated START has been received while still addressed as Slave/Receiver*/
;;;122    			g_u8SlvDataLen = 0;
;;;123    			u32Count = 0;
;;;124          I2C_SET_CONTROL_REG(I2C0, I2C_CTL_SI_AA);
;;;125    		break;
;;;126    		default:
;;;127    			printf("Status 0x%x is NOT processed\n", u32Status);
00002a  4601              MOV      r1,r0
00002c  a02d              ADR      r0,|L5.228|
00002e  f7fffffe          BL       __2printf
;;;128    		break;
;;;129    	}
;;;130    	return;
;;;131    }
000032  bdf8              POP      {r3-r7,pc}
                  |L5.52|
000034  68a8              LDR      r0,[r5,#8]            ;78
000036  b2c1              UXTB     r1,r0                 ;78
000038  7820              LDRB     r0,[r4,#0]            ;80  ; g_u8SlvDataLen
00003a  2803              CMP      r0,#3                 ;80
00003c  d213              BCS      |L5.102|
00003e  7820              LDRB     r0,[r4,#0]            ;81  ; g_u8SlvDataLen
000040  4a27              LDR      r2,|L5.224|
000042  1c52              ADDS     r2,r2,#1              ;81
000044  1813              ADDS     r3,r2,r0              ;81
000046  1c40              ADDS     r0,r0,#1              ;81
000048  7020              STRB     r0,[r4,#0]            ;81
00004a  7019              STRB     r1,[r3,#0]            ;81
00004c  7810              LDRB     r0,[r2,#0]            ;82  ; g_au8SlvRxData
00004e  7851              LDRB     r1,[r2,#1]            ;82  ; g_au8SlvRxData
000050  0400              LSLS     r0,r0,#16             ;82
000052  0209              LSLS     r1,r1,#8              ;82
000054  1840              ADDS     r0,r0,r1              ;82
000056  7891              LDRB     r1,[r2,#2]            ;82  ; g_au8SlvRxData
000058  1840              ADDS     r0,r0,r1              ;82
00005a  6120              STR      r0,[r4,#0x10]         ;82  ; slave_buff_addr
00005c  6921              LDR      r1,[r4,#0x10]         ;83  ; slave_buff_addr
00005e  a029              ADR      r0,|L5.260|
000060  f7fffffe          BL       __2printf
000064  e033              B        |L5.206|
                  |L5.102|
000066  4a2c              LDR      r2,|L5.280|
000068  68e0              LDR      r0,[r4,#0xc]          ;86  ; u32Count
00006a  5411              STRB     r1,[r2,r0]            ;86
00006c  1c40              ADDS     r0,r0,#1              ;86
00006e  60e0              STR      r0,[r4,#0xc]          ;87  ; u32Count
000070  6921              LDR      r1,[r4,#0x10]         ;87  ; slave_buff_addr
000072  4288              CMP      r0,r1                 ;87
000074  d103              BNE      |L5.126|
000076  6920              LDR      r0,[r4,#0x10]         ;88  ; slave_buff_addr
000078  f7fffffe          BL       I2C_Rx_Write_To_SPI
00007c  e005              B        |L5.138|
                  |L5.126|
00007e  6921              LDR      r1,[r4,#0x10]         ;90  ; slave_buff_addr
000080  4288              CMP      r0,r1                 ;90
000082  d924              BLS      |L5.206|
000084  a025              ADR      r0,|L5.284|
000086  f7fffffe          BL       __2printf
                  |L5.138|
00008a  60e6              STR      r6,[r4,#0xc]          ;92  ; u32Count
00008c  e01f              B        |L5.206|
                  |L5.142|
00008e  68a8              LDR      r0,[r5,#8]            ;98
000090  b2c1              UXTB     r1,r0                 ;98
000092  a028              ADR      r0,|L5.308|
000094  f7fffffe          BL       __2printf
000098  6126              STR      r6,[r4,#0x10]         ;100  ; slave_buff_addr
00009a  6920              LDR      r0,[r4,#0x10]         ;102  ; slave_buff_addr
00009c  60a8              STR      r0,[r5,#8]            ;102
00009e  482c              LDR      r0,|L5.336|
0000a0  6921              LDR      r1,[r4,#0x10]         ;103  ; slave_buff_addr
0000a2  5c40              LDRB     r0,[r0,r1]            ;103
0000a4  60a8              STR      r0,[r5,#8]            ;103
0000a6  6920              LDR      r0,[r4,#0x10]         ;104  ; slave_buff_addr
0000a8  1c40              ADDS     r0,r0,#1              ;104
0000aa  6120              STR      r0,[r4,#0x10]         ;104  ; slave_buff_addr
0000ac  e00f              B        |L5.206|
                  |L5.174|
0000ae  6920              LDR      r0,[r4,#0x10]         ;108  ; slave_buff_addr
0000b0  4927              LDR      r1,|L5.336|
0000b2  1809              ADDS     r1,r1,r0              ;108
0000b4  1c40              ADDS     r0,r0,#1              ;108
0000b6  6120              STR      r0,[r4,#0x10]         ;108  ; slave_buff_addr
0000b8  7808              LDRB     r0,[r1,#0]            ;108
0000ba  60a8              STR      r0,[r5,#8]            ;108
0000bc  e007              B        |L5.206|
                  |L5.190|
0000be  6920              LDR      r0,[r4,#0x10]         ;112  ; slave_buff_addr
0000c0  4923              LDR      r1,|L5.336|
0000c2  1809              ADDS     r1,r1,r0              ;112
0000c4  1c40              ADDS     r0,r0,#1              ;112
0000c6  6120              STR      r0,[r4,#0x10]         ;112  ; slave_buff_addr
0000c8  7808              LDRB     r0,[r1,#0]            ;112
0000ca  60a8              STR      r0,[r5,#8]            ;112
0000cc  6126              STR      r6,[r4,#0x10]         ;113  ; slave_buff_addr
                  |L5.206|
0000ce  6828              LDR      r0,[r5,#0]            ;124
0000d0  43b8              BICS     r0,r0,r7              ;124
0000d2  300c              ADDS     r0,r0,#0xc            ;124
0000d4  6028              STR      r0,[r5,#0]            ;124
0000d6  bdf8              POP      {r3-r7,pc}
                  |L5.216|
0000d8  7026              STRB     r6,[r4,#0]            ;122
0000da  e7d6              B        |L5.138|
;;;132    
                          ENDP

                  |L5.220|
                          DCD      0x40080000
                  |L5.224|
                          DCD      ||.data||
                  |L5.228|
0000e4  53746174          DCB      "Status 0x%x is NOT processed\n",0
0000e8  75732030
0000ec  78257820
0000f0  6973204e
0000f4  4f542070
0000f8  726f6365
0000fc  73736564
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L5.260|
000104  736c6176          DCB      "slave_buff_addr:%d\n",0
000108  655f6275
00010c  66665f61
000110  6464723a
000114  25640a00
                  |L5.280|
                          DCD      ||.bss||
                  |L5.284|
00011c  4572726f          DCB      "Error not left space\n",0
000120  72206e6f
000124  74206c65
000128  66742073
00012c  70616365
000130  0a00    
000132  00                DCB      0
000133  00                DCB      0
                  |L5.308|
000134  73747374          DCB      "ststus 0xa8 get data:%d\n",0
000138  75732030
00013c  78613820
000140  67657420
000144  64617461
000148  3a25640a
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L5.336|
                          DCD      ||.bss||+0x100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  g_au8SlvData
                          %        256
                  g_u8CompareData
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  g_u8SlvDataLen
000000  00                DCB      0x00
                  g_au8SlvRxData
000001  000000            DCB      0x00,0x00,0x00
                  s_I2C0HandlerFn
                          DCD      0x00000000
                  u32FlashAddress
                          DCD      0x00000000
                  u32Count
                          DCD      0x00000000
                  slave_buff_addr
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  g_u8DeviceAddr
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\i2c_transfer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_i2c_transfer_c_b80b4882____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_i2c_transfer_c_b80b4882____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_i2c_transfer_c_b80b4882____REVSH|
#line 402
|__asm___14_i2c_transfer_c_b80b4882____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
